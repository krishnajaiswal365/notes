# Django Email Validator using Pickle Model

Here's a complete Django implementation for an email validation system that uses a pre-trained pickle model with input and output columns to predict if an email is valid, invalid, or impossible.

## Project Structure

```
email_validator/
├── manage.py
├── email_validator/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── asgi.py
│   └── wsgi.py
└── validator_app/
    ├── migrations/
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── models.py
    ├── tests.py
    ├── views.py
    └── templates/
        └── validator_app/
            ├── index.html
            └── result.html
```

## Step-by-Step Implementation

### 1. Create the Django App

First, create a new Django project and app:

```bash
django-admin startproject email_validator
cd email_validator
python manage.py startapp validator_app
```

### 2. Update settings.py

Add your app to `INSTALLED_APPS` in `email_validator/settings.py`:

```python
INSTALLED_APPS = [
    ...
    'validator_app',
]
```

### 3. Create Models (validator_app/models.py)

```python
from django.db import models

class EmailValidationResult(models.Model):
    email = models.EmailField()
    prediction = models.CharField(max_length=20)  # valid, invalid, impossible
    confidence = models.FloatField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.email} - {self.prediction}"
```

### 4. Create Views (validator_app/views.py)

```python
import pickle
import os
from django.conf import settings
from django.shortcuts import render, redirect
from .models import EmailValidationResult

# Load your pickle model (put your model file in the app directory)
MODEL_PATH = os.path.join(settings.BASE_DIR, 'validator_app', 'email_validator_model.pkl')

try:
    with open(MODEL_PATH, 'rb') as f:
        model = pickle.load(f)
except FileNotFoundError:
    model = None
    print("Warning: Model file not found. Predictions will not work.")

def index(request):
    if request.method == 'POST':
        email = request.POST.get('email', '').strip()
        
        if model and email:
            # Preprocess the email (adjust based on your model's requirements)
            processed_email = preprocess_email(email)
            
            # Make prediction
            prediction = model.predict([processed_email])[0]
            confidence = None
            
            # If your model supports predict_proba
            if hasattr(model, 'predict_proba'):
                proba = model.predict_proba([processed_email])[0]
                confidence = max(proba) * 100  # Convert to percentage
            
            # Save to database
            result = EmailValidationResult(
                email=email,
                prediction=prediction,
                confidence=confidence
            )
            result.save()
            
            return render(request, 'validator_app/result.html', {
                'email': email,
                'prediction': prediction,
                'confidence': confidence,
            })
        
    return render(request, 'validator_app/index.html')

def preprocess_email(email):
    """
    Preprocess the email to match how your model was trained.
    Modify this based on your model's requirements.
    """
    # Example preprocessing - adjust as needed
    return {
        'email_length': len(email),
        'has_at': '@' in email,
        'domain_length': len(email.split('@')[-1]) if '@' in email else 0,
        # Add more features as needed by your model
    }
```

### 5. Create Templates

Create `validator_app/templates/validator_app/index.html`:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Email Validator</title>
</head>
<body>
    <h1>Email Validation</h1>
    <form method="post">
        {% csrf_token %}
        <input type="email" name="email" placeholder="Enter email address" required>
        <button type="submit">Validate</button>
    </form>
</body>
</html>
```

Create `validator_app/templates/validator_app/result.html`:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Validation Result</title>
</head>
<body>
    <h1>Email Validation Result</h1>
    <p><strong>Email:</strong> {{ email }}</p>
    <p><strong>Prediction:</strong> {{ prediction }}</p>
    {% if confidence %}
    <p><strong>Confidence:</strong> {{ confidence|floatformat:2 }}%</p>
    {% endif %}
    <a href="{% url 'index' %}">Check another email</a>
</body>
</html>
```

### 6. Update URLs (email_validator/urls.py)

```python
from django.contrib import admin
from django.urls import path
from validator_app import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index, name='index'),
]
```

### 7. Create Admin Interface (validator_app/admin.py)

```python
from django.contrib import admin
from .models import EmailValidationResult

@admin.register(EmailValidationResult)
class EmailValidationResultAdmin(admin.ModelAdmin):
    list_display = ('email', 'prediction', 'confidence', 'created_at')
    list_filter = ('prediction', 'created_at')
    search_fields = ('email',)
```

### 8. Migrations

```bash
python manage.py makemigrations
python manage.py migrate
```

### 9. Create Superuser (Optional)

```bash
python manage.py createsuperuser
```

### 10. Run the Server

```bash
python manage.py runserver
```

## Important Notes

1. **Model File**: Place your pickle model file (`email_validator_model.pkl`) in the `validator_app` directory.

2. **Preprocessing**: The `preprocess_email` function in views.py needs to be customized based on how your model was trained. The example shows simple features, but you should match the exact preprocessing used during training.

3. **Model Requirements**: Ensure your Django environment has all the required packages that were used to train the model (like specific versions of scikit-learn, etc.).

4. **Security**: Be cautious with pickle files as they can execute arbitrary code. Only use pickle files from trusted sources.

5. **Error Handling**: The current implementation has basic error handling. You might want to add more robust error handling for production.

This implementation provides a complete web interface for your email validation model, stores results in a database, and shows predictions with optional confidence scores.
